title: english!
sidebar:
  Home: "Home"
  Download: "Download"
  Start: "Start"
  Reference: "Reference"
  Libraries: "Libraries"
  Learn: "Learn"
  Contribute: "Contribute"
index: 
  Download: "Download"
  Start: "Start"
  Reference: "Reference"
  Libraries: "Libraries"
  Learn: "Learn"
  Contribute: "Contribute"
  hello: "Hello!"
  p1x1: "p5.js is a JavaScript library that starts with the original goal of "
  p1x2: ", to make coding accessible for artists, designers, educators, and beginners, and reinterprets this for today's web."
  p2x1: "Using the original metaphor of a software sketchbook, p5.js has a full set of drawing functionality. However, you're not limited to your drawing canvas, you can think of your whole browser page as your sketch! For this, p5.js has addon"
  libraries: " libraries"
  p2x2: " that make it"
  interact: " easy to interact"
  p2x3: " with other HTML5 objects, including text, input, video, webcam, and sound."
  p3: "p5.js is a new interpretation, not an emulation or port, and it is in active development. An official editing environment is coming soon, as well as many more features!"
gallery:
  title: "Gallery"
  sub: "A curated collection of projects created with p5.js. Want to see your work here? Get in touch at "
  email: "feature@p5js.org"
start:
  title: "Get Started"
  subx1: "This page walks you through setting up a p5.js project and making your first sketch. If you are using the p5 editor, you can skip to the "
  firstSketch: "Your First Sketch"
  subx2: " section. Processing users may want to check out the "
  processingTutorial: "Processing transition tutorial"
  head1: "Download and File Setup"
  p1x1: "The easiest way to start is by using the empty example that comes with the "
  p5complete: "p5.js complete"
  p1x2: "download."
  p1x2: "If you look in index.html, you'll notice that it links to the file p5.js. If you would like to use the minified version (compressed for faster page loading), change the link to p5.min.js."
  p1x4: "Alternatively, you can link to a p5.js file hosted online. All versions of p5.js are stored in a CDN (Content Delivery Network). You can see a history of these versions here: "
  p5CDN: "p5.js CDN"
  p1x5: ". In this case you can change the link to: "
  head2: "Environment"
  p2x1: "You can use the "
  editor: "code editor"
  p2x2: " of your choice. Instructions for getting set up with "
  sublime: "Sublime Text 2"
  p2x3: " are included below. (An official p5 editor is in development, you can test out the alpha version "
  here: "here"
  p2x4: "Open Sublime. Go to the File menu and choose Open... and choose the folder that your html and js files are located in. On the left sidebar, you should nowsee the folder name at the top, with a list of the files contained in the folder directly below."
  p2x5: "Click on your sketch.js file and it will open on the right where you can edit it."
  p2x6: "Open a web browser. Type:"
  p2x7: " in the address bar to view your sketch."
  head3: "Your First Sketch"
  p3x1: "In your editor, type the following:"
  p3x2: "This line of code means *draw an ellipse, with the center 50 pixels over from the left and 50 pixels down from the top, with a width and height of 80 pixels.*"
  p3x3: "Refresh your page view in your browser, if you've typed everything correctly, you'll see this appear in the display window: "
  p3x4: "If you didn't type it correctly, you might not see anything. If this happens, make sure that you've copied the example code exactly: the numbers should be contained within parentheses and have commas between each of them, and the line should end with a semicolon."
  p3x5: "One of the most difficult things about getting started with programming is that you have to be very specific about the syntax. The browser isn't always smart enough to know what you mean, and can be quite fussy about the placement of punctuation. You'll get used to it with a little practice. Depending on the browser you are using, you can also see errors by looking at the JavaScript console. In chrome, for example, this is under View > Developer > JavaScript Console."
  p3x6: "Next, we'll skip ahead to a sketch that's a little more exciting. Delete the text from the last example, and try this: "
  p3x7: "This program creates a window that is 640 pixels wide and 480 pixels high, and then starts drawing white circles at the position of the mouse. When a mouse button is pressed, the circle color changes to black. We'll explain more about the elements of this program in detail later. For now, run the code, move the mouse, and click to experience it."
  head4: "What Next?"
  p4x1: "Read the "
  p4x2: " to learn how to convert from Processing to p5.js, and the main differences between them."
  p4x3: "View the "
  reference: "reference"
  p4x4: " for full documentation."
  p4x5: "Check out the "
  learn: "learn"
  p4x6: " page for tutorials and examples."
  footer: "Parts of this tutorial were adapted from the book, Getting Started with Processing, by Casey Reas and Ben Fry, O'Reilly / Make 2010. Copyright 2010 Casey Reas and Ben Fry. All rights reserved."
libraries: 
  title: "Libraries"
  dom: "p5.dom"
  domText: "p5.dom lets you interact with HTML5 objects beyond the canvas, including video, audio, webcam, input, and text."
  sound: "p5.sound"
  soundText: "p5.sound extends p5 with Web Audio functionality including audio input, playback, analysis and synthesis."
  head1: "Contributed"
  speech: "p5.speech"
  speechText: "p5.speech provides simple, clear access to the Web Speech and Speech Recognition APIs, allowing for the easy creation of sketches that can talk and listen. Created by "
  play: "p5.play"
  playText: "p5.play provides sprites, animations, input and collision functions for games and gamelike applications. Created by "
  grafica: "grafica.js"
  graficaText: "grafica.js lets you add simple but highly configurable 2D plots to your p5.js sketches. Created by "
  gibber: "p5.gibber"
  gibberText: "p5.gibber provides rapid music sequencing and audio synthesis capabilities. Created by "
  head2: "Using a library"
  p1x1: "A p5.js library can be any JavaScript code that extends or adds to the p5.js core functionality.There are two categories of libraries. Core libraries ("
  and: "and "
  p1x2: ") are part of the p5.js distribution, while contributed libraries are developed, owned, and maintained by members of the p5.js community."
  p1x3: "To include a library in your sketch, link it into your HTML file, after you have linked in p5.js. An example HTML file might look like this:"
  head3: "Create Your Own"
  p2x1: "p5.js welcomes libraries contributed by others! Check out the"
  tutorial: " libraries tutorial"
  p2x2: " for more specifics about how to create one."
tutorials:
  title: "Tutorials"
  subx1: "These tutorials provide more in-depth or step-by-step overviews of particular topics. Check out the "
  examples: "examples page"
  subx2: " to see short demonstrations of various p5.js topics."
  hello: "Hello p5.js"
  helloText: "This short video will introduce you to the library and what you can do with it."
  start: "Getting Started"
  startText: "Welcome to p5.js! This introduction covers the basics of setting up a p5.js project."
  overview: "p5.js overview"
  overviewText: "An overview of the main features of p5.js."
  transition: "p5.js and Processing"
  transitionText: "The main differences between the two, and how to convert from one to the other."
  beyond: "Beyond the canvas"
  beyondText: "Creating and manipulating elements on the page beyond the canvas."
  adding: "Adding libraries"
  addingText: "Finding, adding, and integrating other JS libraries."
  server: "Using a local server"
  serverText: "How to set up a local server on Mac OSX, Windows, or Linux."
  nodexsocket: "node.js and socket.io"
  nodexsocketText: "Using a node.js server with p5.js, communcation via socket.io."
  dev: "Development"
  devText: "Getting started and overview for contributing to development."
community:
  title: "Community"
  head1: "p5.js Community Statement"
  p1x1: "p5.js is a community interested in exploring the creation of art and design with technology. "
  p1x2: "We are a community of, and in solidarity with, people from every gender identity and expression, sexual orientation, race, ethnicity, language, neuro-type, size, ability, class, religion, culture, subculture, political opinion, age, skill level, occupation, and background. We acknowledge that not everyone has the time, financial means, or capacity to actively participate, but we recognize and encourage involvement of all kinds. We facilitate and foster access and empowerment. We are all learners. "
  p1x3: "We like these hashtags: #noCodeSnobs (because we value community over efficiency), #newKidLove (because we all started somewhere), #unassumeCore because we don't assume knowledge), and #BlackLivesMatter (because of course)."
  practice: " In practice: "
  p1x4: "We are not code snobs. We do not assume knowledge or imply there are things that somebody should know. "
  p1x5: "We insist on actively engaging with requests for feedback regardless of their complexity. "
  p1x6: "We welcome newcomers and prioritize the education of others. We strive to approach all tasks with the enthusiasm of a newcomer. Because we believe that newcomers are just as valuable in this effort as experts. "
  p1x7: "We consistently make the effort to actively recognize and validate multiple types of contributions. "
  p1x8: "We are always willing to offer help or guidance. "
  conflict: " In times on conflict: "
  p1x9: "We listen."
  p1x10: "We clearly communicate while acknowledging other's feelings."
  p1x11: "We admit when we're wrong, apologize, and accept responsibility for our actions."
  p1x12: "We are continuously seeking to improve ourselves and our community."
  p1x13: "We keep our community respectful and open."
  p1x14: "We make everyone feel heard."
  p1x15: "We are mindful and kind in our interactions."
  future: " In the future: "
  p1x16: "The future is now."
  head2: "Get Involved"
  p2x1: "To learn more about getting involved in p5.js, check out our " 
  contribute: "contribute page"
  p2x2: ". Our community is always looking for enthusiasts to help in all different ways."
  p2x3: "If you're wondering where to start, take a look at our existing "
  tutorials: "tutorials"
  p2x4: ", browse our "
  gallery: "gallery"
  p2x5: " of p5.js projects, or play with "
  examples: "examples"
  p2x6: "Follow us on Twitter at "
  head3: " Contributors Conference "
  p3x1: "This year, p5.js held its first-ever "
  conference: "contributors conference"
  p3x2: ". Artists, designers, developers, educators, and more joined forces at "
  p3x3: " to make p5.js awesome. "
contribute:
  title: "Contribute"
  head1: "Get Involved"
  sub: "p5.js is a collaborative project created by many individuals, and you are invited to help. All types of involvement are welcome."
  develop: "Develop"
  github: "Github"
  p1x1: " is the main place where code is collected, issues are documented, and discussions about code are had. Check out the "
  devTutorial: "development tutorial"
  p1x2: " to get started, or "
  createLib: "create your own library."
  document: "Document"
  p2x1: "Everyone loves documentation. Help is needed "
  port: "porting examples"
  add: "adding documentation"
  p2x2: ", and creating tutorials."
  teach: "Teach"
  p3x1: "Check out the "
  education: "education page"
  p3x2: "on the wiki to view resources from past classes, workshops, and events. Add your own links!"
  create: "Create"
  p4x1: "p5.js is looking for designers, artists, coders, programmers to bring your creative and amazing work to show on the front page and inspire other people."
  submit: "Submit your work!"
  p4x2: "Get in touch at"
  p5: "Something else? Get in touch at "
  head2: "Contributors"
  c1: "p5.js is actively developed by "
  c2: " in collaboration with many others."
  c3: " helped conceptualize this project from the early stages and did signicant work with core code structure and organization, and creation of educational materials."
  c4: " added the vector and math functionality, and developed examples and materials while running some of the first trials of p5.js in the classroom."
  c5: " created the visual identity, logo, and website design."
  c6: " is leading the development of the p5.js IDE."
  c7: " is currently working on the p5.Sound library and I/O functionality as part of Google Summer of Code."
  c8: " made the fantastic "
  hello: "hello p5.js"
  c9: "The students and faculty in the p5.js working group at "
  c10: "meet biweekly throughout the school year to work on everything from language design and documentation to testing and bug fixes."
  c11: "Developers at "
  c12: ", including "
  and: ", and"
  c13: ", have made significant code contributions and offer invaluable guidance with JS and development practices."
  c14: "Many others"
  c15: " from around the world contribute code and ideas to the library and documentation."
  c16: ", have provided support and guidance since their initial provocation of the project."
  c17: " have offered significant support while incorporating p5.js into their curricula."
conference:
  title: "p5.js Contributors Conference"
  subx1: "A diverse group of approximately 30 participants gathered spent a week at the "
  subx2: ", advancing the code, documentation, and community outreach tools of the p5.js programming environment. Participants came from as far away as Hong Kong, Seattle, Los Angeles, Boston and New York. Most were working professionals in the fields of creative technology, interaction design, and new-media arts, but the group also included a half-dozen undergraduate and graduate students from Carnegie Mellon’s Schools of Art and Architecture."
  head1: "Participants"
  head2: "Diversity"
  p2x1: "Alongside technical development, one of the main focuses of this conference was outreach, community, and diversity. The conference began with a panel—"
  panel: "Diversity: Seven Voices on Race, Gender, Ability, & Class for FLOSS and the Internet"
  p2x2: ". Organized by "
  p2x3: ", the panel took place Tuesday, 25 May 2015 in Kresge Auditorium at Carnegie Mellon University. Speakers included "
  head3: "Support"
  p3x1: "Our contributor conference took place at the "
  p3x2: "at Carnegie Mellon University, an academic laboratory for atypical, anti-disciplinary, and inter-institutional research at the intersections of arts, science, technology, and culture."
  p3x3: "This event was made possible by a grant from the "
  p3x4: ", and generous support from the "
  the: " the"
  and: " and "
  thanks: "Thank you!"
arrays_array:
  title: "Array"
  sub: "An array is a list of data. Each piece of data in an array is identified by an index number representing its position in the array. Arrays are zero based, which means that the first element in the array is [0], the second element is [1], and so on. In this example, an array named 'coswav' is created and filled with the cosine values. This data is displayed three separate ways on the screen. "
arrays_array_2D:
  title: "Array 2D"
  sub: "Demonstrates the syntax for creating a two-dimensional (2D) array. Values in a 2D array are accessed through two index values. 2D arrays are useful for storing images. In this example, each dot is colored in relation to its distance from the center of the image. "
arrays_array_objects:
  title: "Array Objects"
  sub: "Demonstrates the syntax for creating an array of custom objects."
color_brightness:
  title: "Brightness"
  sub1: "By Dan Shiffman. This program adjusts the brightness of a part of the image by calculating the distance of each pixel to the mouse."
  sub2: " To run this example locally, you will need at least an image file and a running "
  server: "local server"
color_color_variables:
  title: "Color Variables"
  sub: "(Homage to Albers.) This example creates variables for colors that may be referred to in the program by a name, rather than a number."
color_hue:
  title: "Hue"
  sub: "Hue is the color reflected from or transmitted through an object and is typically referred to as the name of the color (red, blue, yellow, etc.) Move the cursor vertically over each bar to alter its hue."
color_linear_gradient:
  title: "Linear Gradient"
  sub: "The lerpColor() function is useful for interpolating between two colors."
color_radial_gradient:
  title: "Radial Gradient"
  sub: "Draws a series of concentric circles to create a gradient from one color to another."
color_relativity:
  title: "Relativity"
  sub: "Each color is perceived in relation to other colors. The top and bottom bars each contain the same component colors, but a different display order causes individual colors to appear differently."
color_saturation:
  title: "Saturation"
  sub: 'Saturation is the strength or purity of the color and represents the amount of gray in proportion to the hue. A "saturated" color is pure and an "unsaturated" color has a large percentage of gray. Move the cursor vertically over each bar to alter its saturation.'
control_conditionals_1:
  title: "Conditionals 1"
  sub: "Conditions are like questions. They allow a program to decide to take one action if the answer to a question is true or to do another action if the answer to the question is false. The questions asked within a program are always logical or relational statements. For example, if the variable 'i' is equal to zero then draw a line."
control_conditionals_2:
  title: "Conditionals 2"
  sub: 'We extend the language of conditionals from the previous example by adding the keyword "else". This allows conditionals to ask two or more sequential questions, each with a different action.'
control_embedded_iteration:
  title: "Embedded Iteration"
  sub: 'Embedding "for" structures allows repetition in two dimensions.'
control_iteration:
  title: "Iteration"
  sub: 'Iteration with a "for" structure to construct repetitive forms.'
control_logical_operators:
  title: "Logical Operators"
  sub: 'The logical operators for AND (&&) and OR (||) are used to combine simple relational statements into more complex expressions. The NOT (!) operator is used to negate a boolean statement.'
data_true_and_false:
  title: "True and False"
  sub: 'A Boolean variable has only two possible values: true or false. It is common to use Booleans with control statements to determine the flow of a program. In this example, when the boolean value "x" is true, vertical black lines are drawn and when the boolean value "x" is false, horizontal gray lines are drawn.'
data_variable_scope:
  title: "Variable Scope"
  sub: 'Variables have a global or local "scope". For example, variables declared within either the setup() or draw() functions may be only used in these functions. Global variables, variables declared outside of setup() and draw(), may be used anywhere within the program. If a local variable is declared with the same name as a global variable, the program will use the local variable to make its calculations within the current scope. Variables are localized within each block, the space between a { and }.'
data_variables:
  title: "Variables"
  sub: "Variables are used for storing values. In this example, change the values of variables to affect the composition."
dom_drop: 
  title: "Drop"
  sub1: "You will need to include the "
  domLib: "p5.dom library"
  sub2: "for this example to work in your own project."
  sub3: "Drag an image file onto the canvas to see it displayed."
dom_input_and_button:
  title: "Input and Button" 
  sub1: "You will need to include the"
  domLib: " p5.dom library"
  sub2: " for this example to work in your own project."
  sub3: "Input text and click the button to see it affect the the canvas."
dom_modifying_the_DOM:
  title: "Modifying the DOM"
  sub1: "Create DOM elements and modify their properties every time draw() is called. You will need to include the"
  domLib: " p5.dom library"
  sub2: "for this example to work in your own project."
dom_slider:
  title: "Slider"
  sub1: "You will need to include the"
  domLib: " p5.dom library"
  sub2: "for this example to work in your own project."
  sub3: "Move the sliders to control the R, G, B values of the background."
dom_video:
  title: "Video"
  sub1: "Load a video with multiple formats and toggle between playing and paused with a button press."
  sub2: " To run this example locally, you will need at least one video file, and the"
  domLib: " p5.dom library"
dom_video_canvas:
  title: "Video Canvas"
  sub1: "Load a video with multiple formats and draw it to the canvas."
  sub2: " To run this example locally, you will need the"
  domLib: " p5.dom library"
  sub3: ", at least one video file, and a running "
  server: "local server"
dom_video_capture:
  title: "Video Capture"
  sub1: " To run this example locally, you will need the"
  domLib: " p5.dom library"
  sub2: ", at least one video file, and a running "
  server: "local server"
  sub3: "Capture video from the webcam and display on the canvas as well with invert filter. Note that by default the capture feed shows up, too. You can hide the feed by uncommenting the capture.hide() line."
dom_video_pixels:
  title: "Video Pixels"
  sub1: "Load a video, manipulate its pixels and draw to canvas."
  sub2: " To run this example locally, you will need the"
  domLib: " p5.dom library"
  sub3: ", at least one video file, and a running "
  server: "local server"
form_bezier:
  title: "Bezier"
  sub: "The first two parameters for the bezier() function specify the first point in the curve and the last two parameters specify the last point. The middle parameters set the control points that define the shape of the curve."
form_pie_chart:
  title: "Pie Chart"
  sub: "Uses the arc() function to generate a pie chart from the data stored in an array."
form_points_and_lines:
  title: "Points and Lines"
  sub: "Points and lines can be used to draw basic geometry. Change the value of the variable 'd' to scale the form. The four variables set the positions based on the value of 'd'."
form_regular_polygon:
  title: "Regular Polygon"
  sub: "What is your favorite? Pentagon? Hexagon? Heptagon? No? What about the icosagon? The polygon() function created for this example is capable of drawing any regular polygon. Try placing different numbers into the polygon() function calls within draw() to explore."
form_shape_primitives:
  title: "Shape Primitives"
  sub: "The basic shape primitive functions are triangle(), rect(), quad(), ellipse(), and arc(). Squares are made with rect() and circles are made with ellipse(). Each of these functions requires a number of parameters to determine the shape's position and size."
form_star:
  title: "Star"
  sub: "The star() function created for this example is capable of drawing a wide range of different forms. Try placing different numbers into the star() function calls within draw() to explore."
form_triangle_strip:
  title: "Triangle Strip"
  sub: "Example by Ira Greenberg. Generate a closed ring using the vertex() function and beginShape(TRIANGLE_STRIP) mode. The outsideRadius and insideRadius variables control ring's radii respectively."
image_alpha_mask:
  title: "Alpha Mask"
  sub1: "Loads a 'mask' for an image to specify the transparency in different parts of the image. The two images are blended together using the mask() method of p5.Image."
  sub2: " To run this example locally, you will need two image files, and a running "
  server: "local server"
image_background_image:
  title: "Background Image"
  sub1: "This example presents the fastest way to load a background image into Processing. To load an image as the background, it must be the same width and height as the program."
  sub2: " To run this example locally, you will need two image files, and a running "
  server: "local server"
image_create_image:
  title: "Create Image"
  sub: "The createImage() function provides a fresh buffer of pixels to play with. This example creates an image gradient."
image_load_and_display:
  title: "Load and Display Image"
  sub1: "Images can be loaded and displayed to the screen at their actual size or any other size."
  sub2: " To run this example locally, you will need two image files, and a running "
  server: "local server"
image_pointillism:
  title: "Pointillism"
  sub1: "By Dan Shiffman. Mouse horizontal location controls size of dots. Creates a simple pointillist effect using ellipses colored according to pixels in an image."
  sub2: " To run this example locally, you will need two image files, and a running "
  server: "local server"
image_transparency:
  title: "Transparency"
  sub1: "Move the pointer left and right across the image to change its position. This program overlays one image over another by modifying the alpha value of the image with the tint() function."
  sub2: " To run this example locally, you will need two image files, and a running "
  server: "local server"
instance_mode_instantation:
  title: "Instantiation"
  sub: "Create a p5 instance, which keeps all variables out of the global scope of your page."
math_noise1D:
  title: "Noise1D"
  sub: "Using 1D Perlin Noise to assign location."
math_additive_wave:
  title: "Additive Wave"
  sub: "Create a more complex wave by adding two waves together. Original by Daniel Shiffman"
math_arctangent:
  title: "Arctangent"
  sub1: "Move the mouse to change the direction of the eyes."
  sub2: "The atan2() function computes the angle from each eye to the cursor."
math_distance_1D:
  title: "Distance 1D"
  sub: "Move the mouse left and right to control the speed and direction of the moving shapes."
math_distance_2D:
  title: "Distance 2D"
  sub: "Move the mouse across the image to obscure and reveal the matrix. Measures the distance from the mouse to each square and sets the size proportionally."
math_double_random:
  title: "Double Random"
  sub: "Using two random() calls and the point() function to create an irregular sawtooth line. Original by by Ira Greenberg."
math_increment_decrement:
  title: "Increment Decrement"
  sub: 'Writing "a++" is equivalent to "a = a + 1". Writing "a--" is equivalent to "a = a - 1".'
math_noise_wave:
  title: "Noise Wave"
  sub: "Using Perlin Noise to generate a wave-like pattern. Original by Daniel Shiffman."
math_operator_precedence:
  title: "Operator Precedence"
  sub: "If you don't explicitly state the order in which an expression is evaluated, they are evaluated based on the operator precedence. For example, in the statement '4+2*8', the 2 will first be multiplied by 8 and then the result will be added to 4. This is because the '*' has a higher precedence than the '+'. To avoid ambiguity in reading the program, it is recommended that is statement is written as '4+(2*8)'. The order of evaluation can be controlled through placement of parenthesis in the code. A table of operator precedence follows below."
math_polarToCartesian:
  title: "PolarToCartesian"
  sub: "Convert a polar coordinate (r,theta) to cartesian (x,y): x = rcos(theta) y = rsin(theta) Original by Daniel Shiffman. "
math_random:
  title: 'Random'
  sub: "Random numbers create the basis of this image. Each time the program is loaded the result is different."
math_sine:
  title: "Sine"
  sub: "Smoothly scaling size with the sin() function."
math_sine_cosine:
  title: "Sine Cosine"
  sub: 'Linear movement with sin() and cos(). Numbers between 0 and PI*2 (TWO_PI which angles roughly 6.28) are put into these functions and numbers between -1 and 1 are returned. These values are then scaled to produce larger movements.'
math_sine_wave:
  title: "Sine Wave"
  sub: "Render a simple sine wave. Original by Danial Shiffman."
mobile_acceleration_ball_bounce:
  title: "Acceleration Ball Bounce"
  sub: "Move an ellipse around based on accelerationX and accelerationY values, and bounces when touch the edge of the canvas."
mobile_acceleration_color:
  title: "Acceleration Color"
  sub: "Use deviceMoved() to detect when the device is rotated. The background RGB color values are mapped to accelerationX, accelerationY, and accelerationZ values."
mobile_shake_ball_bounce:
  title: "Shake Ball Bounce"
  sub: "Create a Ball class, instantiate multiple objects, move it around the screen, and bounce when touch the edge of the canvas. Detect shake event based on total change in accelerationX and accelerationY and speed up or slow down objects based on detection. "
mobile_simple_draw:
  title: "Simple Draw"
  sub: "Touch to draw on the screen using touchX, touchY, ptouchX, and ptouchY values."
objects_array_of_objects:
  title: "Array of Objects"
  sub: "Create a Jitter class, instantiate an array of objects and move them around the screen."
objects_multiple_objects:
  title: "Multiple Objects"
  sub: "Create a Jitter class, instantiate multiple objects, and move it around the screen. "
objects_objects:
  title: "Objects"
  sub: "Create a Jitter class, instantiate an object, and move it around the screen. Adapted from Getting Started with Processing by Casey Reas and Ben Fry."
objects_objects_2:
  title: "Objects 2"
  sub: "Ported from example by hbarragan. Move the cursor across the image to change the speed and positions of the geometry. The class MRect defines a group of lines."
simulate_flocking:
  title: "Flocking"
  sub1: "Demonstration of Craig Reynolds' 'Flocking' behavior. See: http://www.red3d.com/cwr/ Rules: Cohesion, Separation, Alignment"
  sub2: "Drag mouse to add boids into the system."
simulate_forces:
  title: 'Forces'
  sub: "Demonstration of multiple force acting on bodies" 
simulate_game_of_life:
  title: "Game of Life"
  sub: "A basic implementation of John Conway's Game of Life CA"
simulate_multiple_particle_systems:
  title: "Multiple Particle Systems"
  sub1: "Click the mouse to generate a burst of particles at mouse location.<br>Each burst is one instance of a particle system with Particles and CrazyParticles (a subclass of Particle).<br>Note use of Inheritance and Polymorphism here. " 
  sub2: "Original by Daniel Shiffman. "
simulate_particle_system:
  title: "Particle System"
  sub: "This is a basic Particle System"
simulate_wolfram_CA:
  title: "Wolfram CA"
  sub: "Simple demonstration of a Wolfram 1-dimensional cellular automata"
sound_amplitude_volume:
  title: "Amplitude (Volume)"
  sub: "Analyze the amplitude (volume) of sound with p5.Amplitude."
  local1: " To run this example locally, you will need the"
  local2: "p5.sound library"
  local3: "a sound file, and a running "
  local4: "local server"
sound_amplitude_analysis:
  title: 'Amplitude Analysis'
  sub: "Analyze the amplitude (volume) of sound with p5.Amplitude."
  local1: " To run this example locally, you will need the"
  local2: "p5.sound library"
  local3: "a sound file, and a running "
  local4: "local server"
sound_convolution_reverb:
  title: "Convolution Reverb"
  sub: "The p5.Convolver can recreate the sound of actual spaces using convolution. Convolution takes an Impulse Response, (the sound of a room reverberating), and uses that to recreate the sound of that space.</p><p>Click to play a sound through convolution. Every time you click, the sound is convolved with a different Impulse Response. To hear the Impulse Response itself, press any key."
  local1: " To run this example locally, you will need the"
  local2: "p5.sound library"
  local3: "a sound file, and a running "
  local4: "local server"
  sub4: 'These convolution samples are Creative Commons BY'
sound_delay:
  title: 'Delay'
  sub: "  Click the mouse to hear the p5.Delay process a SoundFile. MouseX controls the p5.Delay Filter Frequency. MouseY controls both the p5.Delay Time and Resonance. Visualize the resulting sound's volume with an Amplitude object. *"
  local1: " To run this example locally, you will need the"
  local2: "p5.sound library"
  local3: "a sound file, and a running "
  local4: "local server"
sound_filter_bandpass:
  title: "Filter BandPass"
  sub: "Apply a p5.BandPass filter to white noise. Visualize the sound with FFT. Map mouseX to the bandpass frequency and mouseY to resonance/width of the a BandPass filter *"
  local1: " To run this example locally, you will need the"
  local2: "p5.sound library"
  local3: "a sound file, and a running "
  local4: "local server"
sound_filter_lowpass:
  title: "Filter LowPass"
  sub: "Apply a p5.LowPass filter to a p5.SoundFile. Visualize the sound with FFT. Map mouseX to the the filter's cutoff frequency and mouseY to resonance/width of the a BandPass filter *"
  local1: " To run this example locally, you will need the"
  local2: "p5.sound library"
  local3: "a sound file, and a running "
  local4: "local server"
sound_note_envelope:
  title: "Note Envelope"
  sub: 'An Envelope is a series of fades, defined as time / value pairs. In this example, the envelope will be used to "play" a note by controlling the output amplitude of an oscillator.<br/><br/> The p5.Oscillator sends its output through an internal Web Audio GainNode (p5.Oscillator.output). By default, that node has a constant value of 0.5. It can be reset with the osc.amp() method. Or, in this example, an Envelope takes control of that node, turning the amplitude up and down like a volume knob.'
  local1: " To run this example locally, you will need the"
  local2: "p5.sound library"
  local3: "a sound file, and a running "
  local4: "local server"
sound_record_save_audio:
  title: "Record Save Audio"
  sub: "Record a sound, play it back and save it as a .wav file to the client's computer. We need three objects: a p5.AudioIn (mic / sound source), p5.SoundRecorder (records the sound), and a p5.SoundFile (play back / save)."
  local1: " To run this example locally, you will need the"
  local2: "p5.sound library"
  local3: "a sound file, and a running "
  local4: "local server"
sound_reverb:
  title: "Reverb"
  sub: "Reverb gives depth and perceived space to a sound. Here, noise is processed with reverb. *"
  local1: " To run this example locally, you will need the"
  local2: "p5.sound library"
  local3: "a sound file, and a running "
  local4: "local server"
sound_amplitude_modulation:
  title: "Amplitude Modulation"
  sub1: "Amplitude Modulation involves two oscillators, referred to as the carrier and the modulator, where the modulator controls the carrier's amplitude."
  sub2: "The carrier is typically set at an audible frequency (i.e. 440 Hz) and connected to master output by default. The carrier.amp is set to zero because we will have the modulator control its amplitude."
  sub3: "The modulator is typically set to a frequency that is lower than humans can hear (i.e. 1 Hz, or one cycle every second). The modulator is disconnected from master output. Instead, it is connected to the amplitude of the Carrier, like this: carrier.amp(modulator)."
  sub4: "MouseX controls the amplitude of the modulator from 0 to 1. When the modulator's amplitude is set to 0, the amplitude modulation has no effect."
  sub5: "MouseY controls the frequency of the modulator from 0 to 20hz. Both impact our perception of the Carrier frequency. A subtle amount of Amplitude Modulation can simulate effects such as Tremolo. Ring Modulation is a type of Amplitude Modulation where the original carrier signal is not present."
  sub6: "You will need to include the "
  soundLib: "p5.sound library"
  sub7: "for this example to work in your own project."
sound_frequency_modulation:
  title: "Frequency Modulation"
  sub1: "Frequency Modulation involves two oscillators, referred to as the carrier and the modulator, where the modulator controls the carrier's frequency."
  sub2: "The carrier oscillates at an audible frequency (i.e. 440 Hz) and connected to master output by default. The carrier.amp is set to zero because we will have the modulator control its amplitude."
  sub3: "The modulator is typically set to a frequency that is lower than humans can hear (i.e. 1 Hz, or one cycle every second). The modulator is disconnected from master output, and is connected to the frequency of the carrier, like this: carrier.freq(modulator)."
  sub4: "In this example,"
  sub5: "- MouseX controls the amplitude of the modulator from 0 to 1. When the modulator's amplitude is set to 0, the amplitude modulation has no effect."
  sub6: "- MouseY controls the frequency of the modulator from 0 to 20hz. Both impact our perception of the Carrier frequency. A subtle amount of Amplitude Modulation can simulate effects such as Tremolo. Ring Modulation is a type of Amplitude Modulation where the original carrier signal is not present."
  sub7: "- The modulator output, a signal between -1 and 1, is scaled to a range between 100 and 300 using .mult() and .add()"
  sub8: "You will need to include the "
  soundLib: "p5.sound library"
  sub9: "for this example to work in your own project."
sound_frequency_spectrum:
  title: "Frequency Spectrum"
  sub: "Visualize the frequency spectrum of live audio input."
  local1: " To run this example locally, you will need the"
  local2: "p5.sound library"
  local3: "a sound file, and a running "
  local4: "local server"
sound_load_and_play_sound:
  title: "Load and Play Sound"
  sub: "Load sound during preload(). Play a sound when canvas is clicked."
  local1: " To run this example locally, you will need the"
  local2: "p5.sound library"
  local3: "a sound file, and a running "
  local4: "local server"
sound_mic_inpute:
  title: "Mic Input"
  sub1: "Get audio input from your computer's microphone. Make noise to float the ellipse."
  sub2: "Note: p5.AudioIn contains its own p5.Amplitude object, so you can call getLevel on p5.AudioIn without creating a p5.Amplitude."
sound_mic_threshold:
  title: "Mic Threshold"
  sub: "Trigger an event (draw a rectangle) when the Audio Input volume surpasses a threshold."
  local1: " To run this example locally, you will need the"
  local2: "p5.sound library"
  local3: "a sound file, and a running "
  local4: "local server"
sound_noise_drum_envelope:
  title: "Noise Drum Envelope"
  sub1: "White Noise is a random audio signal with equal energy at every part of the frequency spectrum"
  sub2: "An Envelope is a series of fades, defined as time / value pairs."
  sub3: "In this example, the p5.Env will be used to 'play' the p5.Noise like a drum by controlling its output amplitude. A p5.Amplitude will get the level of all sound in the sketch, and we'll use this value to draw a green rectangle that shows the envelope in action."
  local1: " To run this example locally, you will need the"
  local2: "p5.sound library"
  local3: "a sound file, and a running "
  local4: "local server"
sound_oscillator_frequency:
  title: "Oscillator Frequency"
  sub: "Control an Oscillator and view the waveform using FFT. MouseX is mapped to frequency, mouseY is mapped to amplitude."
  local1: " To run this example locally, you will need the"
  local2: "p5.sound library"
  local3: "a sound file, and a running "
  local4: "local server"
sound_pan_sound:
  title: "Pan Sound"
  sub: "Click mouse to play the sound. Ball position follows mouse and correlates to panning of sound."
  local1: " To run this example locally, you will need the"
  local2: "p5.sound library"
  local3: "a sound file, and a running "
  local4: "local server"
sound_play_mode:
  title: "Play Mode"
  sub: "In 'sustain' mode, the sound will overlap with itself. In 'restart' mode it will stop and then start again. Click mouse to play a sound file. Trigger lots of sounds at once! Press any key to change playmode."
  local1: " To run this example locally, you will need the"
  local2: "p5.sound library"
  local3: "a sound file, and a running "
  local4: "local server"
sound_playback_rate:
  title: "Playback Rate"
  sub: "Load a SoundFile and map its playback rate to mouseY, volume to mouseX. Playback rate is the speed with which the web audio context processings the sound file information. Slower rates not only increase the duration of the sound, but also decrease the pitch because it is being played back at a slower frequency."
  local1: " To run this example locally, you will need the"
  local2: "p5.sound library"
  local3: "a sound file, and a running "
  local4: "local server"
sound_preload_soundfile:
  title: "Preload SoundFile"
  sub: "Call loadSound() during preload() to ensure that the sound is completely loaded before setup() is called. It's best to always call loadSound() in preload(), otherwise sounds won't necessarily be loaded by the time you want to play them in your sketch. *"
  local1: " To run this example locally, you will need the"
  local2: "p5.sound library"
  local3: "a sound file, and a running "
  local4: "local server"
sound_sound_effect:
  title: "Sound Effect"
  sub: "Play a sound effect when the mouse is clicked inside the circle."
  local1: " To run this example locally, you will need the"
  local2: "p5.sound library"
  local3: "a sound file, and a running "
  local4: "local server"
sound_soundFormats:
  title: "soundFormats"
  sub1: "There is no single sound format that is supported by all web browsers. For example, mp3 support is not native to Firefox and Opera because the mp3 codec is patented."
  sub2: "To ensure compatability, you can include the same sound file in multiple formats, i.e. 'sound.mp3' and 'sound.ogg'. (Ogg is an open source alternative to mp3.) You can convert audio files into web friendly formats for free online at "
  sub3: "The soundFormats() method tells loadSound which formats we have included with our sketch. Then, loadSound will attempt to load the first format that is supported by the client's web browser."
  local1: " To run this example locally, you will need the"
  local2: "p5.sound library"
  local3: "a sound file, and a running "
  local4: "local server"
structure_coordinates:
  title: "Coordinates"
  sub: "All shapes drawn to the screen have a position that is specified as a coordinate. All coordinates are measured as the distance from the origin in units of pixels. The origin [0, 0] is the coordinate is in the upper left of the window and the coordinate in the lower right is [width-1, height-1]."
structure_functions:
  title: "Functions"
  sub: "The drawTarget() function makes it easy to draw many distinct *targets. Each call to drawTarget() specifies the position, size, and number of *rings for each target."
structure_loop:
  title: "Loop"
  sub: "The code inside the draw() function runs continuously from top to bottom until the program is stopped."
structure_no_loop:
  title: "No Loop"
  sub: "The noLoop() function causes draw() to only execute once. Without calling noLoop(), the code inside draw() is run continually."
structure_redraw:
  title: "Redraw"
  sub: "The redraw() function makes draw() execute once. In this example, *draw() is executed once every time the mouse is clicked."
structure_setup_and_draw:
  title: "Setup and Draw"
  sub: "The code inside the draw() function runs continuously from top to bottom until the program is stopped."
structure_width_and_height:
  title: "Width and Height"
  sub: "The 'width' and 'height' variables contain the width and height of the display window as defined in the createCanvas() function."
hello_p5_animation:
  title: "Animation"
  sub: "The circle moves."
hello_p5_drawing:
  title: "Drawing"
  sub: "Generative painting program."
hello_p5_flocking:
  title: "Flocking"
  sub1: "Demonstration of "
  sub2: "Craig Reynolds' 'Flocking' behavior"
  sub3: "(Rules: Cohesion, Separation, Alignment.)"
  sub4: "From"
hello_p5_interactivity_1:
  title: "Interactivity 1"
  sub: "The circle changes color when you click on it."
  local1: " To run this example locally, you will need the"
  local2: "p5.sound dom library"
hello_p5_interactivity_2:
  title: "Interactivity 2"
  sub: "The circle changes color when you move the slider. You will need to include the "
  local2: "p5.sound dom library"
  local3: "for this example to work in your own project."
hello_p5_simple_shapes:
  title: "Simple Shapes"
  sub: "This examples includes a circle, square, triangle, and a flower."
hello_p5_song:
  title: "Song"
  sub: "Play a song. You will need to include the "
  local2: "p5.sound dom library"
  local3: "for this example to work in your own project."
hello_p5_weather:
  title: "Weather"
  sub: "This example grabs JSON weather data from openweathermap.org. You will need to include the "
  local2: "p5.sound dom library"
  local3: "for this example to work in your own project."






